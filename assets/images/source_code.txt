#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <time.h>
#include <fstream>
#include <string.h>
#include <omp.h>
#define TotalThreads 27

using namespace std;

class User
{
public:
    char name[50];
    int age;
    int pass;
    char score[10];
    User()
    {

        age = 0;
        pass = 0;
    }

    int setPass()
    {
        srand(time(NULL));
        int pas = 1001 + rand() % 9990;
        pass = pas;
        cout << "Your password  : " << pass;
        return pass;
    }
    char *setName()
    {
        char n[50];
        cout << "Enter your name : ";
        cin.getline(n, 49);
        strcpy(name, n);
        return name;
    }
    int setAge()
    {
        int a;
        cout << "Enter your age : ";
        cin >> a;
        age = a;
        return age;
    }
    char *Score(int c)
    {
        if (c == 1)
        {
            strcpy(score, "Loss");
            return score;
        }
        else if (c == 2)
        {
            strcpy(score, "Won");
            return score;
        }
        else if (c == 0)
        {
            strcpy(score, "NONE");
            return score;
        }
        return score;
    }
    void setData();
    void SaveUser();
    void showData();
    void showUserData();
    void updateScore(int);
};

void User::setData()
{
    setName();
    setAge();
    setPass();
}

void User::SaveUser()
{
    fstream fout;
    fout.open("UserData.dat", ios::out | ios::binary);
    setData();
    fout.write((char *)this, sizeof(*this));
    fout.close();
}
void User::showData()
{
    cout << "Name : " << name;
    cout << endl
         << "Age : " << age;
    cout << endl
         << "Score : " << score;
    cout << endl;
}
void User::showUserData()
{
    fstream fin;
    int p;
    cout << "Enter your password : ";
    cin >> p;
    fin.open("UserData.dat", ios::in | ios::binary);
    if (!fin)
    {
        cout << "File not found!";
    }
    else
    {
        fin.read((char *)this, sizeof(*this));
        while (!fin.eof())
        {
            if (p == pass)
            {
                showData();
                break;
            }
            fin.read((char *)this, sizeof(*this));
        }
    }
    fin.close();
}
void User::updateScore(int c)
{
    fstream fin;
    fstream tempfin;
    tempfin.open("Temp.dat", ios::out | ios::binary);
    fin.open("UserData.dat", ios::in | ios::binary);
    while (!fin.eof())
    {
        fin.read((char *)this, sizeof(*this));
        if (!fin.eof()) // Check if we have reached the end of the file
        {
            Score(c);
            tempfin.write((char *)this, sizeof(*this));
        }
    }
    fin.close();
    tempfin.close();
    remove("UserData.dat");
    rename("Temp.dat", "UserData.dat");
}
struct Sudoku
{
    int row;
    int col;
    int (*board)[9];
};

int result[TotalThreads] = {0};
int count = 0;
#pragma omp threadprivate(count)

void welcome()
{
    cout << "\n\n\n\n\n\n\t\t\t\tThis Program is Designed by\n\n\n\t\t\t\t\t\tk213355 Talha Shahid\n\n\n\t\t\t\t\t\tk214948 Muhammad Huzaifa\n\n\n\t\t\t\t\t\tk213158 Muhammad Shahmir Raza";
    cout << "\n\n\nPress Enter to continue....";
    getchar();
    system("cls");
}

void getDataThread()
{
    User obj;
    obj.SaveUser();
}

void updateScoreThread(int num)
{
    User obj;
    obj.updateScore(num);
}

int ValidateGridThread(Sudoku *SudokuGrid)
{
    int startRow = SudokuGrid->row;
    int startCol = SudokuGrid->col;
    int seen[10] = {0};
    int isvalid = 1;
#pragma omp parallel for collapse(2) schedule(static) shared(seen)
    for (int i = startRow; i < startRow + 3; ++i)
    {
        for (int j = startCol; j < startCol + 3; ++j)
        {
            int val = SudokuGrid->board[i][j];
#pragma omp critical
            {
                if (seen[val] != 0)
                {
                    isvalid = 0;
                }
                else
                {
                    seen[val] = 1;
                }
            }
        }
    }

#pragma omp critical
    {
        result[startRow + startCol / 3] = 1;
    }
    return isvalid;
}

int ValidateRowThread(Sudoku *SudokuGrid)
{
    int row = SudokuGrid->row;
    int isvalid = 1;

    int seen[10] = {0};
#pragma omp parallel for schedule(static) shared(seen)
    for (int j = 0; j < 9; j++)
    {
        int val = SudokuGrid->board[row][j];
#pragma omp critical
        {
            if (seen[val] != 0)
            {
                isvalid = 0;
            }
            else
            {
                seen[val] = 1;
            }
        }
    }

#pragma omp critical
    {
        result[9 + row] = 1;
    }
    return isvalid;
}

int ValidateColsThread(Sudoku *SudokuGrid)
{
    int col = SudokuGrid->col;
    int isvalid = 1;
    int seen[10] = {0};
#pragma omp parallel for schedule(static) shared(seen)
    for (int i = 0; i < 9; i++)
    {
        int val = SudokuGrid->board[i][col];
#pragma omp critical
        {
            if (seen[val] != 0)
            {
                isvalid = 0;
            }
            else
            {
                seen[val] = 1;
            }
        }
    }

#pragma omp critical
    {
        result[18 + col] = 1;
    }
    return isvalid;
}

void displayDataThread()
{
    User obj;
    obj.showUserData();
}

int ValidateRangeThread(Sudoku *SudokuGrid)
{
    int localCount = 0; // Each thread has its local count
#pragma omp parallel for collapse(2) schedule(static) reduction(+:localCount)
    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            int val = SudokuGrid->board[i][j];
#pragma omp critical
            {
                if (val == 0)
                {
                    localCount++;
                }
            }
        }
    }

    // Use a critical section to update the global count
#pragma omp critical
    {
        count += localCount;
    }

    return (localCount == 0); // Return true if local count is zero, indicating valid range
}

int check_line(int input[9])
{
    int seen[10] = {0};
    for (int i = 0; i < 9; i++)
    {
        int val = input[i];

        if (seen[val] != 0)
        {
            return 1;
        }
        else
        {
            seen[val] = 1;
        }
    }
    return 0;
}

int ValidateGridThread(int sudoku[9][9])
{
    int temp_row, temp_col;
    int isValid = 1; // Assume the subgrid is valid

#pragma omp parallel for collapse(2) shared(temp_row, temp_col, isValid)
    for (int i = 0; i < 3; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            temp_row = 3 * i;
            temp_col = 3 * j;
            int seen[10] = {0};
            int localIsValid = 1; // Assume the subgrid is valid for this thread

#pragma omp parallel for collapse(2) schedule(static) shared(seen, localIsValid)
            for (int k = temp_row; k < temp_row + 3; k++)
            {
                for (int l = temp_col; l < temp_col + 3; l++)
                {
                    int val = sudoku[k][l];

                    if (seen[val] != 0)
                    {
                        localIsValid = 0; // Set to an invalid state for this thread
                    }
                    else
                    {
                        seen[val] = 1;
                    }
                }
            }

#pragma omp critical
            {
                if (localIsValid == 0)
                {
                    isValid = 0; // Set to an invalid state if any thread finds an issue
                }
            }
        }
    }

    return isValid;
}
int ValidateSudoku(int sudoku[9][9])
{
    int isValid = 1; // Assume the Sudoku is valid

#pragma omp parallel for shared(sudoku, isValid)
    for (int i = 0; i < 9; i++)
    {
        // Check each row
        if (!isValid) // Exit early if any thread found an issue
            continue;

        if (check_line(sudoku[i]))
        {
#pragma omp critical
            {
                isValid = 0; // Set to an invalid state if any thread finds an issue
            }
        }

        // Check each column
        int check_col[9];
#pragma omp parallel for shared(sudoku, check_col)
        for (int j = 0; j < 9; j++)
        {
            check_col[j] = sudoku[j][i];
        }

        if (!isValid) // Exit early if any thread found an issue
            continue;

        if (check_line(check_col))
        {
#pragma omp critical
            {
                isValid = 0; // Set to an invalid state if any thread finds an issue
            }
        }
    }

    // Check each 3x3 subgrid
    if (!isValid) // Exit early if any thread found an issue
        return isValid;

    if (ValidateGridThread(sudoku))
    {
#pragma omp critical
        {
            isValid = 0; // Set to an invalid state if any thread finds an issue
        }
    }

    return isValid;
}

int main()
{
    welcome();
    User obj;
#pragma omp parallel
    {
#pragma omp single
        {
            getDataThread();
        }
    }

    int sudoku[9][9] =
        {
            {9, 4, 2, 1, 6, 3, 8, 5, 7},
            {5, 3, 6, 2, 8, 7, 9, 4, 1},
            {8, 7, 1, 9, 5, 4, 2, 3, 6},
            {3, 2, 7, 8, 1, 9, 4, 6, 5},
            {1, 5, 4, 3, 2, 6, 7, 9, 8},
            {6, 9, 8, 7, 4, 5, 1, 2, 3},
            {2, 6, 5, 4, 7, 1, 3, 8, 9},
            {7, 8, 9, 6, 3, 2, 5, 1, 4},
            {4, 1, 3, 5, 9, 8, 6, 7, 2}};

    Sudoku *grid = (Sudoku *)malloc(sizeof(Sudoku));
    grid->board = sudoku;
#pragma omp parallel
    {
#pragma omp single
        {
            ValidateRangeThread(grid);
        }
    }

    if (count == 1)
    {
        cout << "\nInvalid Sudoku Solution! because we cannot enter 0 in sudoku\n";
        exit(0);
    }

    if (ValidateSudoku(sudoku))
    {
        cout << "\n\n======***************************************************************************************======\n\n";
        cout << "\nThis answer is validated by using single Thread :\n\n";
        cout << "Sudoku solution is invalid\n";
    }
    else
    {
        cout << "\n\n======***************************************************************************************======\n\n";
        cout << "\nThis answer is validated by using single Thread : \n\n";
        cout << "Sudoku solution is valid\n";
    }

    // MultiThreading starts from here....

#pragma omp parallel for schedule(dynamic)
    for (int i = 0; i < TotalThreads; i++)
    {
        if (result[i] == 0)
        {
            cout << "\n\n======***************************************************************************************======\n\n";
            cout << "\nThis answer is validated by using MultiThreads :\n\n";
            cout << "Sudoku solution is invalid" << endl;

            int m;
            cout << "\nDo you want to see your stats if yes press 1 else press 2 : ";
            cin >> m;
            if (m == 1)
            {
#pragma omp parallel
                {
                    displayDataThread();
                }
            }
            else
            {
                exit(EXIT_SUCCESS);
            }
            exit(1);
        }
    }
    cout << "\n\n======***************************************************************************************======\n\n";

    cout << "\nThis answer is validated by using MultiThreads :\n\n";
    cout << "Sudoku solution is valid" << endl;

    int m;
    cout << "\nDo you want to see your stats if yes press 1 else press 2 : ";
    cin >> m;
    if (m == 1)
    {
#pragma omp parallel
        {
            displayDataThread();
        }
    }
    else
    {
        exit(EXIT_SUCCESS);
    }

    return 0;
}